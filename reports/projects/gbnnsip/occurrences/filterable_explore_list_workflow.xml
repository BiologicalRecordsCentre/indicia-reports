<report
    title="Explore occurrences (standard filters, workflow)"
    description="A list of occurrences designed for tabular output with additional columns and parameters to
      support workflow."
>
  <query website_filter_field="o.website_id" samples_id_field="o.sample_id"
         standard_params="occurrences" count_field="o.*">
  SELECT #columns#
  FROM cache_occurrences_functional o
  JOIN cache_occurrences_nonfunctional onf on onf.id=o.id
  JOIN occurrences occ on occ.id=o.id
  JOIN cache_samples_nonfunctional snf on snf.id=o.sample_id
  JOIN samples s on s.id=o.sample_id and s.deleted=false
  JOIN cache_taxa_taxon_lists cttl on cttl.id=o.taxa_taxon_list_id
  LEFT JOIN index_websites_website_agreements canEdit on canEdit.from_website_id=o.website_id
    and canEdit.to_website_id in (#website_ids#) and canEdit.provide_for_editing=true
  JOIN workflow_metadata wm ON wm.key='taxa_taxon_list_external_key'
          and wm.key_value=o.taxa_taxon_list_external_key
          and wm.group_code='#workflow_group_code-unprocessed#'
  #agreements_join#
  #joins#
  WHERE #sharing_filter#
  #idlist#
  </query>
  <order_bys>
    <order_by>o.id DESC</order_by>
  </order_bys>
  <params>
    <param name="smpattrs" display="Sample attribute list" datatype="smpattrs" default=""
           description="Comma separated list of sample attribute IDs to include as columns in the report" />
    <param name="occattrs" display="Occurrence attribute list" datatype="occattrs" default=""
           description="Comma separated list of occurrence attribute IDs to include as columns in the report" />
    <param name="default_input_form" display="Default input form" default=""
           description="Input form path to use when no other available. Can be used to generate the path in report_grid action links." />
    <param name="force_default_input_form" display="Force default input form" default="0"
           description="Force the default input form to be used instead of the one specified by the record" />
    <param name="workflow_group_code" display="Workflow group code" default=""
           description="Code for the Workflow group to show associated records for."
           preprocess="
             select '''' || string_agg(key_value, ''', ''') || '''' from workflow_metadata
             where key='taxa_taxon_list_external_key' and entity='occurrence'
             and group_code='#workflow_group_code#'
             ">
      <where>o.taxa_taxon_list_external_key in (#workflow_group_code#)</where>
    </param>
    <param name="workflow_overdue" display="Overdue records only" default="" datatype="boolean">
      <where>get_workflow_overdue_by(o.record_status, o.record_substatus, o.created_on, wm.verification_delay_hours) &gt; '0 hours'::interval</where>
    </param>
    <param name="workflow_overdue_notification" display="Workflow overdue notification status" datatype="lookup"
       default="" lookup_values="yes:Notification exists,no:Notification doesn't exist">
      <joins>
        <join value="yes" operator="equal">JOIN notifications n on n.linked_id=o.id AND n.source_type='VT'</join>
        <join value="no" operator="equal">LEFT JOIN notifications n on n.linked_id=o.id AND n.source_type='VT'</join>
      </joins>
      <where value="no" operator="equal">n.id IS NULL</where>
    </param>
    <param name="comments_search" display="Search comments" sql="websearch_to_tsquery('english', '#comments_search#') @@ to_tsvector('english', coalesce(o.comment, '') || ' ' || coalesce(s.comment, ''))" type="text" default="" />
  </params>
  <columns>
    <column name="occurrence_id" display="ID" sql="o.id" datatype="integer"
        template="&lt;span class='status-icon status-{record_status} release-{release_status} substatus-{record_substatus} query-{query} certainty-{certainty}' title='{status_hint}'&gt;&lt;/span&gt;
        &lt;span class='record-id'&gt;{occurrence_id}&lt;/span&gt;
        &lt;input type='hidden' class='external_key' value='{external_key}' /&gt;" />
    <column name="external_key" display="External key" sql="cttl.external_key" datatype="text" visible="false" />
    <column name="source" display="Source" datatype="text"
        sql="snf.website_title || ' | ' || case when substring(snf.survey_title from 1 for length(snf.website_title)) = snf.website_title then trim(substring(snf.survey_title from length(snf.website_title)+1)) else snf.survey_title end" />
    <column name="source_id" display="Source ID" datatype="text" visible="false"
            sql="o.website_id::varchar || '|' || o.survey_id::varchar"
            template="&lt;span title=&quot;{source}&quot;&gt;{source_id}&lt;/span&gt;" />
    <column name="sample_id" visible="false" sql="o.sample_id" datatype="integer" />
    <column name="taxon" display="Species" datatype="species" sql="cttl.preferred_taxon" template="&lt;span class='zero-{zero_abundance}'&gt;{taxon}&lt;/span&gt;" />
    <column name="common" display="Common name" datatype="text" sql="cttl.default_common_name" template="&lt;span class='zero-{zero_abundance}'&gt;{common}&lt;/span&gt;" />
    <column name="taxon_group" display="Taxon group" sql="cttl.taxon_group" datatype="text" />
    <column name="taxon_group_id" display="Taxon group ID" sql="o.taxon_group_id" visible="false" datatype="integer" />
    <column name="taxa_taxon_list_id" visible="false" sql="o.taxa_taxon_list_id" datatype="integer" />
    <column name="location_name" display="Site name" sql="o.location_name" datatype="text" />
    <column name="entered_sref" display="Original grid ref" datatype="text" visible="false"
        sql="regexp_replace(s.entered_sref, ',[^ ]', ', ', 'g')" />
    <column name="output_sref" sql="onf.output_sref" display="Grid ref" datatype="text" />
    <column name="date_start" sql="o.date_start" visible="false" />
    <column name="date_end" sql="o.date_end" visible="false" />
    <column name="date_type" sql="o.date_type" visible="false" />
    <column name="date" display="Date" datatype="date" />
    <column name="cache_created_on" sql="to_char(o.created_on,'DD/MM/YYYY')" display="Submitted date" datatype="date" visible="false" orderby="cache_created_on_raw" />
    <column name="cache_created_on_raw" sql="o.created_on" display="Submitted date unformatted" visible="false" />
    <column name="cache_updated_on" sql="to_char(o.updated_on,'DD/MM/YYYY HH24:MI')" display="Last updated" visible="false" orderby="cache_updated_on_raw" />
    <column name="cache_updated_on_raw" sql="o.updated_on" display="Last updated unformatted" visible="false" />
    <column name="recorder" display="Recorder" sql="CASE WHEN (TRIM(snf.recorders) !~ ' ' AND LENGTH(snf.recorders)>30) THEN 'Recorder' ELSE snf.recorders END" datatype="text" />
    <column name="zero_abundance" display="Zero abundance" sql="o.zero_abundance" visible="false" />
    <column name="created_by_id" visible="false" sql="o.created_by_id" datatype="integer" />
    <column name="record_status" display="State" sql="o.record_status" visible="false" />
    <column name="record_substatus" display="State" sql="o.record_substatus" visible="false" />
    <column name="certainty" display="Certainty" sql="o.certainty" visible="false" />
    <column name="belongs_to_user" display="Belongs to user" sql="CASE WHEN CAST(o.created_by_id AS character varying) = '#user_id#' AND o.website_id IN (#website_ids#) THEN true ELSE false END" visible="false" />
    <column name="belongs_to_site" display="Belongs to site" sql="CASE WHEN o.website_id IN (#website_ids#) THEN true ELSE false END" visible="false" />
    <column name="comment" display="Comment" sql="regexp_replace(coalesce(onf.comment || '&lt;br/&gt;', '') || coalesce(snf.comment, ''), '&lt;br\/&gt;$', '')" />
    <column name="images" display="Images" sql="onf.media" img="true" />
    <column name="input_form" visible="false" sql="case
    when canEdit.id is null then null
    when o.input_form is null or o.website_id not in (#website_ids#) or #force_default_input_form#=1 then '#default_input_form#'
    else o.input_form
end" datatype="text" />
    <column name='pass' visible='false' sql="CASE
      WHEN o.data_cleaner_result='t' THEN '&lt;div class=&quot;pass-icon&quot; title=&quot;Passes all auto-checks.&quot;&gt;&lt;/div&gt;'
      WHEN o.verification_checks_enabled='f' THEN '&lt;div class=&quot;auto-check-disabled-icon&quot; title=&quot;Auto-check disabled.&quot;&gt;-&lt;/div&gt;'
      WHEN o.verification_checks_enabled='t' AND o.data_cleaner_result IS NULL THEN '&lt;div class=&quot;pending-icon&quot; title=&quot;Pending auto-check.&quot;&gt;...&lt;/div&gt;'
    END" />
    <column name="fails" display="Auto check" template="{pass}{fails}"
        sql="case when o.data_cleaner_result='f' then
            replace(replace(replace(replace(onf.data_cleaner_info, '[', '&lt;div class=&quot;fail-icon '), ']', '&quot; '), '{', 'title=&quot;'), '}', '&quot;&gt;&lt;/div&gt;')
        end"
    />
    <column name="query" visible="false" sql="o.query" />
    <column name="status_hint" visible="false"
            sql="case o.record_status when 'V' then 'Accepted' when 'R' then 'Not accepted' when 'T' then 'Test'
              when 'C' then case when o.record_substatus=3 then 'Plausible' when o.certainty='C' then 'Recorder considered this certain' when o.certainty='L' then 'Recorder considered this likely' when o.certainty='U' then 'Recorder considered this uncertain' else 'Not reviewed' end
            end ||
            case o.record_substatus when 1 then ' as correct' when 2 then ' as considered correct' when 4 then ' as unable to verify' when 5 then ' as incorrect' else '' end ||
            case o.query when 'A' then ', query raised and answered' when 'Q' then ', query raised' else '' end" />
    <column name="sensitivity_precision" display="Sensitivity blur (m)" visible="true" sql="onf.sensitivity_precision" />
    <column name="confidential" display="Confidential" visible="true"
      sql="case o.confidential when 't' then '&amp;#x2714;' else '&amp;#x2718;' end" />
    <column name="release_status" display="Release status" visible="true" sql="o.release_status" />
    <column name="workflow_status" display="Workflow status" visible="true" datatype="text" sql="case
    when get_workflow_overdue_by(o.record_status, o.record_substatus, o.query, o.created_on, wm.verification_delay_hours) &gt; '0 hours'::interval then 'overdue'
    when get_workflow_overdue_by(o.record_status, o.record_substatus, o.query, o.created_on, wm.verification_delay_hours) &gt;= '-12 hours'::interval then 'overdue-soon'
    else '' end" />
    <column name="reference" display="Ref." visible="true" sql="occ.metadata->>'GBNNSIP reference'" datatype="text"/>
    <column name="status" display="Status" visible="true" datatype="text"
      sql="CASE occ.metadata->>'Statutory body status' WHEN 'P' THEN 'Pending' WHEN 'I' THEN 'In progress' WHEN 'C' THEN 'Complete' ELSE '' END"/>
  </columns>
</report>