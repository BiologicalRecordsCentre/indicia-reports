<report
    title="Explore occurrences map (standard filters, workflow)"
    description="A list of occurrences including geometry information designed for mapping output with additional
      columns and parameters to support workflow."
>
  <query website_filter_field="o.website_id" samples_id_field="o.sample_id" standard_params="occurrences">
  SELECT #columns#
  FROM cache_occurrences_functional o
  JOIN cache_occurrences_nonfunctional onf on onf.id=o.id
  JOIN cache_samples_nonfunctional snf on snf.id=o.sample_id
  JOIN samples s on s.id=o.sample_id and s.deleted=false
  JOIN cache_taxa_taxon_lists cttl on cttl.id=o.taxa_taxon_list_id
  LEFT JOIN index_websites_website_agreements canEdit on canEdit.from_website_id=o.website_id
    and canEdit.to_website_id in (#website_ids#) and canEdit.provide_for_editing=true
  JOIN workflow_metadata wm ON wm.key='taxa_taxon_list_external_key'
          and wm.key_value=o.taxa_taxon_list_external_key
          and wm.group_code='#workflow_group_code-unprocessed#'
  #agreements_join#
  #joins#
  WHERE #sharing_filter#
  #idlist#
  </query>
  <params>
    <param name='smpattrs' display='Sample attribute list' datatype='smpattrs' default=''
           description='Comma separated list of sample attribute IDs to include as columns in the report' />
    <param name='occattrs' display='Occurrence attribute list' datatype='occattrs' default=''
           description='Comma separated list of occurrence attribute IDs to include as columns in the report' />
    <param name='default_input_form' display='Default input form' default=''
           description='Input form path to use when no other available. Can be used to generate the path in report_grid action links.' />
    <param name="force_default_input_form" display="Force default input form" default="0"
           description="Force the defaault input form to be used instead of the one specified by the record" />
    <param name="bounds" display="Bounds WKT" description="Well known text for the bounding box to load" datatype="text" default="">
      <where>st_intersects(s.geom, st_geomfromtext('#bounds#', 900913))</where>
    </param>
    <param name="max_sq_size" display="Max square size" description="Specify either 1000, 2000 or 10000 for the max square size to show if low precision grid refs in dataset" datatype="integer" default="">
      <wheres>
        <where value="2000" operator="equal">o.map_sq_2km_id&lt;&gt;o.map_sq_10km_id</where>
        <where value="1000" operator="equal">o.map_sq_1km_id&lt;&gt;o.map_sq_2km_id</where>
      </wheres>
      <joins>
        <join value="10000" operator="equal">JOIN map_squares msq on msq.id=o.map_sq_10km_id and msq.size=10000</join>
      </joins>
    </param>
    <param name="workflow_group_code" display="Workflow group code" default=""
           description="Code for the Workflow group to show associated records for."
           preprocess="
             select '''' || string_agg(key_value, ''', ''') || '''' from workflow_metadata
             where key='taxa_taxon_list_external_key' and entity='occurrence'
             and group_code='#workflow_group_code#'
             ">
      <where>o.taxa_taxon_list_external_key in (#workflow_group_code#)</where>
    </param>
    <param name="workflow_overdue" display="Overdue records only" default="" datatype="boolean">
      <where>get_workflow_overdue_by(o.record_status, o.record_substatus, o.created_on, wm.verification_delay_hours) &gt; '0 hours'::interval</where>
    </param>
    <param name="workflow_overdue_notification" display="Workflow overdue notification status" datatype="lookup"
       default="" lookup_values="yes:Notification exists,no:Notification doesn't exist">
      <joins>
        <join value="yes" operator="equal">JOIN notifications n on n.linked_id=o.id AND n.source_type='VT'</join>
        <join value="no" operator="equal">LEFT JOIN notifications n on n.linked_id=o.id AND n.source_type='VT'</join>
      </joins>
      <where value="no" operator="equal">n.id IS NULL</where>
    </param>
    <param name="comments_search" display="Search comments" type="text" default="">
      <where>websearch_to_tsquery('english', '#comments_search#') @@ to_tsvector('english', coalesce(onf.comment, '') || ' ' || coalesce(s.comment, ''))</where>
    </param>
  </params>
  <columns>
    <column name='occurrence_id' sql='o.id' on_demand="true" datatype="integer" />
    <column name='source' on_demand="true" datatype="text"
        sql="snf.website_title || ' | ' || case when substring(o.survey_title from 1 for length(snf.website_title)) = snf.website_title then trim(substring(o.survey_title from length(snf.website_title)+1)) else o.survey_title end" />
    <column name='source_id' on_demand="true" datatype="text" sql="o.website_id::varchar || '.' || o.survey_id::varchar" />
    <column name='sample_id' sql='o.sample_id' on_demand="true" datatype="integer" />
    <column name='taxon' sql="cttl.preferred_taxon" on_demand="true" datatype="species" />
    <column name='common' sql="cttl.default_common_name" on_demand="true" datatype="text" />
    <column name='taxon_group' sql='cttl.taxon_group' on_demand="true" datatype="text" />
    <column name='taxon_group_id' sql='cttl.taxon_group_id' on_demand="true" datatype="integer" />
    <column name='taxa_taxon_list_id' sql='o.taxa_taxon_list_id' on_demand="true" datatype="integer" />
    <column name='location_name' sql='o.location_name' on_demand="true" datatype="text" />
    <column name='entered_sref' on_demand="true" datatype="text" visible="false"
        sql="coalesce(regexp_replace(#sample_sref_field#, ',[^ ]', ', ', 'g'), snf.public_entered_sref, onf.output_sref)" />
    <column name="output_sref" on_demand="true" sql="onf.output_sref" datatype="text" />
    <column name='date_start' sql='o.date_start' on_demand="true" visible='false' />
    <column name='date_end' sql='o.date_end' on_demand="true" visible='false' />
    <column name='date_type' sql='o.date_type' on_demand="true" visible='false' />
    <column name='date' on_demand="true" datatype="date" />
    <column name='cache_created_on' sql='o.created_on' on_demand="true" datatype="date" />
    <column name='cache_updated_on' sql='o.updated_on' on_demand="true" />
    <column name='recorder' on_demand="true" sql="CASE WHEN (TRIM(snf.recorders) !~ ' ' AND LENGTH(snf.recorders)>30) THEN 'Recorder' ELSE snf.recorders END" datatype="text" />
    <column name='created_by_id' visible='false' sql='o.created_by_id' on_demand="true" datatype="integer" />
    <column name="comment" sql="onf.comment" on_demand="true" />
    <column name='input_form' visible="false" on_demand="true" sql="case
    when canEdit.id is null then null
    when o.input_form is null or o.website_id not in (#website_ids#) or #force_default_input_form#=1 then '#default_input_form#'
    else o.input_form
end" datatype="text" />
    <column name="occurrence_ids" visible="false" sql="array_to_string(array_agg(o.id), ',')" aggregate="true" />
    <column name="taxon_meaning_ids" visible="false" sql="array_to_string(array_agg(distinct o.taxon_meaning_id), ',')" aggregate="true" />
    <column name="geom" visible="false" mappable="true" sql="st_astext(s.geom)" in_count="true" />
    <column name="sref_precision" visible="false" sql="snf.attr_sref_precision" />
    <column name="sensitivity_precision" on_demand="true" visible="true" sql="onf.sensitivity_precision" />
    <column name="confidential" on_demand="true" visible="true"
      sql="case o.confidential when 't' then '&amp;#x2714;' else '&amp;#x2718;' end" />
    <column name="release_status" on_demand="true" visible="true" sql="o.release_status" />
    <column name="workflow_status" on_demand="true" visible="true" sql="case
  when get_workflow_overdue_by(o.record_status, o.record_substatus, o.query, o.created_on, wm.verification_delay_hours) &gt; '0 hours'::interval then 'overdue'
  when get_workflow_overdue_by(o.record_status, o.record_substatus, o.query, o.created_on, wm.verification_delay_hours) &gt;= '-12 hours'::interval then 'overdue-soon'
  else ''
end" />
    <column name='fc' visible='false' feature_style="fillColor"
      sql="case
  when o.record_status='R' then '#d7191c'
  when o.record_status='C' then '#abd9e9'
  when o.record_status='C' and o.record_substatus=4 then '#fdae61'
  else '#008837'
end" />
    <column name='sc' visible='false' feature_style="strokeColor"
          sql="case
  when o.record_status='R' then '#a10003'
  when o.record_status='C' then '#5095ad'
  when o.record_status='C' and o.record_substatus=4 then '#bf5e00'
  else '#7fa1ad'
end" />
    <column name='fo' visible='false' feature_style="fillOpacity" sql="0.5" aggregate="true" />
    <column name="reference" display="Ref." on_demand="true" sql="occ.metadata->>'GBNNSIP reference'" datatype="text"/>
    <column name="status" display="Status" on_demand="true" datatype="text"
      sql="CASE occ.metadata->>'Statutory body status' WHEN 'P' THEN 'Pending' WHEN 'I' THEN 'In progress' WHEN 'C' THEN 'Complete' ELSE '' END"/>
  </columns>
</report>