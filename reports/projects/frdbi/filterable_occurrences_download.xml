<report
    title="Occurrences Download using standard filters"
    description="Report suitable for downloading data, compatible with the standard report filter parameters."
>
  <query website_filter_field="o.website_id" samples_id_field="o.sample_id"
         standard_params="occurrences" count_field="o.*">
  SELECT #columns#
  FROM cache_occurrences_functional o
  JOIN cache_occurrences_nonfunctional onf on onf.id=o.id
  JOIN cache_samples_nonfunctional snf on snf.id=o.sample_id
  JOIN cache_taxa_taxon_lists cttl on cttl.id=o.taxa_taxon_list_id
  LEFT JOIN locations vc on vc.id=o.location_id_vice_county and vc.deleted=false
  JOIN users u ON u.id=o.created_by_id
  JOIN people p ON p.id=u.person_id
  JOIN (sample_attribute_values sv
    JOIN sample_attributes sa ON sa.id=sv.sample_attribute_id
    LEFT JOIN cache_termlists_terms st ON st.id=sv.int_value AND sa.data_type='L'
  ) ON sv.sample_id=o.sample_id

  JOIN (occurrence_attribute_values ov
    JOIN occurrence_attributes oa ON oa.id=ov.occurrence_attribute_id
    LEFT JOIN cache_termlists_terms ot ON ot.id=ov.int_value AND oa.data_type='L'
  ) ON ov.occurrence_id=o.id

  #agreements_join#
  #joins#
  WHERE #sharing_filter#
  #idlist#
  </query>
  <order_bys>
    <order_by>o.id DESC</order_by>
  </order_bys>
  <params>
    <param name='smpattrs' display='Sample attribute list' description='Comma separated list of sample attribute IDs to include' datatype='integer[]' />
    <param name='occattrs' display='Occurrence attribute list' description='Comma separated list of occurrence attribute IDs to include' datatype='integer[]' />
    <param name='uploadFolder' display='Image upload folder' description='Image upload folder on the warehouse including the trailing slash' datatype='string' default='' />
    <param name='warehouse_id' display='Warehouse unique ID' default='iBRC'
        description='Unique identifier code for the warehouse which can be prepended to occurrence IDs to make a globally unique record key'/>
  </params>
  <columns>
    <column name='occurrence_id' display='ID' sql='o.id' datatype='integer' distincton="true" template="&lt;div class='status-{record_status} certainty-{certainty}'&gt;{occurrence_id}&lt;/div&gt;" />
    <column name='recordkey' display='RecordKey' sql="'#warehouse_id#' || o.id" datatype="text" />
    <column name='source' display='Source' sql="snf.website_title || ' | ' || snf.survey_title" datatype="text" />
    <column name='sample_id' visible='false' sql='case when onf.sensitivity_precision is null then o.sample_id else null end' datatype='integer' />
    <column name='taxon' display='Species'
      template="&lt;div class='zero-{zero_abundance}'&gt;{taxon}&lt;/div&gt;"
      sql="cttl.preferred_taxon" datatype='species' />
    <column name='common' display='Common name'
      template="&lt;div class='zero-{zero_abundance}'&gt;{common}&lt;/div&gt;"
      sql="cttl.default_common_name" datatype='text' />
    <column name='taxon_group' display='Taxon group' sql='cttl.taxon_group' datatype='text' />
    <column name='kingdom' display='Kingdom' sql='cttl.kingdom_taxon' datatype='text' />
    <column name='order' display='Order' sql='cttl.order_taxon' datatype='text' />
    <column name='family' display='Family' sql='cttl.family_taxon' datatype='text' />
    <column name='taxonversionkey' display='TaxonVersionKey' sql='o.taxa_taxon_list_external_key' datatype="text" />
    <column name='taxa_taxon_list_id' visible='false' sql='o.taxa_taxon_list_id' datatype='integer' />
    <column name='record_comment' display='Comment' sql="onf.comment" datatype="text" />
    <column name='location_name' display='Site name' sql="case when onf.sensitivity_precision is null and onf.privacy_precision is null then o.location_name else 'Sensitive. Lat long is approximate.' end" datatype='text' />
    <column name='entered_sref' display='Grid ref' sql="case snf.entered_sref_system when '4326' then snf.public_entered_sref else replace(snf.public_entered_sref, ' ', '') end" datatype='text' />
    <column name='lat' display='Latitude' sql="substring(st_astext(st_transform(st_centroid(o.public_geom), 4326)) from E'POINT\\(.+ (.+)\\)')" datatype="text" />
    <column name='long' display='Longitude' sql="substring(st_astext(st_transform(st_centroid(o.public_geom), 4326)) from E'POINT\\((.+) ')" datatype="text" />
    <column name='projection' display='Projection'
        sql="case snf.entered_sref_system when '4326' then 'WGS84' when '27700' then 'OSGB36' else upper(snf.entered_sref_system) end"
        datatype="text" />
    <column name='precision' display='Precision'
        sql="case snf.entered_sref_system
    when '4326' then 50
    when '27700' then 1
    else case length(replace(snf.public_entered_sref, ' ', '')) when 5 then 2000 else pow(10, (12-length(replace(snf.public_entered_sref, ' ', '')))/2) end
  end"
        datatype="text" />
    <column name='output_sref' display='Output grid ref' sql="onf.output_sref" datatype='text' />
    <column name="vicecounty" display="Vice county" sql="vc.name" datatype="text" />
    <column name='date_start' sql='o.date_start' visible='false' />
    <column name='date_end' sql='o.date_end' visible='false' />
    <column name='date_type' sql='o.date_type' visible='false' />
    <column name='date' display='Date' datatype='date' />
    <column name='input_date' sql='o.created_on' display='Input on date' datatype='date' />
    <column name='last_edit_date' sql='o.updated_on' display='Last edited on date' datatype='date' />
    <column name='recorder' display='Recorder' sql="rtrim(snf.recorders, ', ')" datatype="text" />
    <column name='determiner' display='Determiner' datatype="text"
      sql="CASE WHEN onf.attr_det_full_name IS NULL THEN
        CASE WHEN onf.attr_det_last_name IS NULL THEN NULL ELSE onf.attr_det_last_name || COALESCE(', ' || onf.attr_det_first_name, '') END
      ELSE onf.attr_det_full_name END" />
    <column name='verifier' display='Verifier' sql='onf.verifier' datatype="text" />
    <column name='verified_on' display='Verified on' sql='o.verified_on' datatype="text" />
    <column name='sample_comment' display='Sample comment' sql="snf.comment" datatype="text" />
    <column name='zeroabundance' display='Zero abundance' sql='upper(cast (o.zero_abundance as character))' datatype="text" />
    <column name='record_status' display='State'
        sql="CASE o.record_status WHEN 'V' THEN 'Verified' WHEN 'D' THEN 'Queried' WHEN 'R' THEN 'Rejected' WHEN 'I' THEN 'Input still in progress' WHEN 'C' THEN 'Record Submitted' WHEN 'S' THEN 'Awaiting check' ELSE o.record_status END" />
    <column name='belongs_to_user' display='Belongs to user' sql="CASE CAST(o.created_by_id AS character varying) WHEN '#currentUser#' THEN true ELSE false END" visible="false" />
    <column name='certainty' display="Recorder certainty" sql="CASE o.certainty WHEN 'C' THEN 'Certain' WHEN 'L' THEN 'Likely' WHEN 'U' THEN 'Uncertain' END" />
    <!-- the following can only be filled in for sure if we have an exact match with the recorder, since we only know the record created by ID.-->
    <column name='recorder_person_id' sql="case when snf.recorders = p.surname || ', ' || p.first_name or snf.recorders = p.first_name || ' ' || p.surname then cast(p.id as varchar(20)) else 'unknown' end" />
    <column name='determiner_person_id' sql="case when snf.recorders = onf.attr_det_last_name || ', ' || onf.attr_det_first_name
        or snf.recorders = onf.attr_det_first_name || ' ' || onf.attr_det_last_name
        or snf.recorders = onf.attr_det_full_name then cast(p.id as varchar(20)) else 'unknown' end" />
    <column name='images' display='Images' sql="case when onf.media is null then null else '#uploadFolder#' || replace(onf.media, ',', ', #uploadFolder#') end"/>
    <column name='licence_code' sql='onf.licence_code' display="Licence" />
    <column name="sample_attrs" display="Sample attributes" aggregate="true"
        sql="('{' || string_agg(distinct '&quot;' || sa.caption || '&quot;: &quot;' || replace(coalesce(st.term, sv.text_value, sv.int_value::text, sv.float_value::text), '&quot;', '\&quot;'), '&quot;, ') || '&quot;}')::json" />
    <column name="occurrence_attrs" display="Occurrence attributes" aggregate="true"
        sql="('{' || string_agg(distinct '&quot;' || oa.caption || '&quot;: &quot;' || replace(coalesce(ot.term, ov.text_value, ov.int_value::text, ov.float_value::text), '&quot;', '\&quot;'), '&quot;, ') || '&quot;}')::json" />
    <column name='associated_with' display='Associated with' datatype="text"
            sql="(select string_agg(case when cttlassoc.default_common_name is null then cttlassoc.preferred_taxon else cttlassoc.default_common_name || ' (' || cttlassoc.preferred_taxon || ')' end, ', ')
  from occurrence_associations oa
  join cache_occurrences_functional oassoc on oassoc.id=oa.to_occurrence_id
  join cache_taxa_taxon_lists cttlassoc on cttlassoc.id=oassoc.taxa_taxon_list_id
  where oa.from_occurrence_id=o.id
)" />
  </columns>
</report>