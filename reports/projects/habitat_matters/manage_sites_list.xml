<report
    title="Locations list"
    description="A general purpose list of locations."
>
  <query website_filter_field="lw.website_id">
  SELECT #columns#
  FROM locations l
  LEFT JOIN locations lp ON lp.id=l.parent_id AND lp.deleted=false
  LEFT JOIN locations_websites lw on lw.location_id=l.id AND lw.deleted=false
  LEFT JOIN (termlists_terms ttl1
    JOIN terms tinput ON tinput.id=ttl1.term_id
    JOIN termlists_terms ttl2 ON ttl2.meaning_id=ttl1.meaning_id
    JOIN terms t ON t.id=ttl2.term_id
  ) ON ttl1.id=l.location_type_id
  LEFT JOIN location_attribute_values vc on vc.location_id=l.id and vc.deleted=false
    AND vc.location_attribute_id=312 -- creation date
  LEFT JOIN location_attribute_values va on va.location_id=l.id and va.deleted=false
    AND va.location_attribute_id=159 -- area
  #joins#
  WHERE l.deleted=false
  AND lw.website_id in (#website_ids#)
  -- Safety check so can't pull other sites.
  AND l.location_type_id IN (19142, 19143, 19144, 20207)
  #idlist#
  #order_by#
  </query>
  <order_bys>
    <order_by>l.created_on DESC</order_by>
  </order_bys>
  <params>
    <param name='location_type_id' display='Location Type' description='Select the location type, or leave blank to not filter by location type.' datatype='integer'>
      <where>l.location_type_id=#location_type_id#</where>
    </param>
    <param name='locattrs' display='Location attribute list' description='Comma separated list of location attribute IDs to include' datatype='locattrs' default="" />
    <param name="search" display="Search for" datatype="text" default="">
      <where>l.name ilike '%#search#%' or l.code ilike '%#search#%'</where>
    </param>
    <param name="user_id" display="User ID" datatype="integer" default="" emptyvalue="0" />
    <param name="limit_to_user" display="Limit to user's own sites" datatype="checkbox" default="" >
      <where>l.created_by_id=#user_id#</where>
    </param>
    <param name='idlist' display='List of IDs' description='Comma separated list of location IDs to filter to.'
      datatype='idlist' fieldname='l.id' alias='location_id' default="" />
  </params>
  <columns>
    <column name="location_id" display="ID" sql="l.id" datatype="integer" />
    <column name="name" display="Name" sql="l.name" datatype="text" />
    <column name="parent_site_id" visible="false" sql="lp.id" datatype="integer" />
    <column name="parent_site_name" display="Part of site" sql="lp.name" datatype="text" />
    <column name="creation_date" display="Date added" sql="to_char(l.created_on, 'DD/MM/YYYY')" datatype="text" />
    <column name="location_type" display="Type" sql="replace(tinput.term, 'Built-environment ', '')" datatype="text" />
    <column name="centroid_sref" display="Grid ref." sql="l.centroid_sref" datatype="text" />
    <column name="suggested_parents" display="Suggested parents" sql="CASE WHEN l.location_type_id&lt;&gt;19142 AND lp.id IS NULL THEN
    (SELECT string_agg(s.id::text || '|' || s.name || '|' || s.centroid_sref || '|' || l.id || '|' || l.name, '; ') FROM locations s WHERE St_Intersects(s.boundary_geom, l.boundary_geom) AND s.location_type_id=19142 AND s.deleted=false)
    ELSE NULL END" />
    <column name="geom" visible="false" sql="st_astext(coalesce(l.boundary_geom, l.centroid_geom))" />
    <column name="can_edit_site" visible="false" sql="l.created_by_id=#user_id# AND l.location_type_id=19142" />
    <column name="can_view_site" visible="false" sql="l.location_type_id=19142" />
    <column name="can_edit_habitat" visible="false" sql="l.created_by_id=#user_id# AND l.location_type_id=19143 AND lp.id IS NOT NULL" />
    <column name="can_view_habitat" visible="false" sql="l.location_type_id=19143 AND lp.id IS NOT NULL" />
    <column name="can_edit_feature" visible="false" sql="l.created_by_id=#user_id# AND l.location_type_id=19144 AND lp.id IS NOT NULL" />
    <column name="can_view_feature" visible="false" sql="l.location_type_id=19144 AND lp.id IS NOT NULL" />
    <column name="can_set_type" visible="false" sql="l.location_type_id=20207" />
  </columns>
</report>