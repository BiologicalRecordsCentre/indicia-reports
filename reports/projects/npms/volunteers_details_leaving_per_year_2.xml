<report
    title="Volunteer details leaving per year 2"
    description="List details of volunteers who leave each NPMS year. This is no hard definition of the term leaving so we assume they have left if they no longer have a square."
>
  <query>
  SELECT distinct #columns#
  FROM people p
  -- Think join here should speed things up else we end up left joining on everything, can't use a users_websites filter as we are interested in people who might not have a record for the wesbite anymore
  JOIN person_attribute_values pavRemovedAlloc on pavRemovedAlloc.person_id = p.id
      AND (EXTRACT(epoch from age(pavRemovedAlloc.updated_on::DATE, pavRemovedAlloc.created_on::DATE)) / 86400)::int &gt;&#61; #min_time_between_alloc_and_dealloc#
      AND pavRemovedAlloc.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc.deleted=true
  -- Note here that the deleted=true check is deliberate as we are only interested in removals
  LEFT JOIN person_attribute_values pavRemovedAlloc15 on pavRemovedAlloc15.id = pavRemovedAlloc.id
      AND pavRemovedAlloc15.updated_on &gt;= '#2015_start_date#' AND pavRemovedAlloc15.updated_on &lt; '#2016_start_date#'
      AND pavRemovedAlloc15.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc15.deleted=true
      -- Need to only take into account the latest removal date, as that is when they left
      AND pavRemovedAlloc15.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc16 on pavRemovedAlloc16.id = pavRemovedAlloc.id
    AND pavRemovedAlloc16.updated_on &gt;= '#2016_start_date#' AND pavRemovedAlloc16.updated_on &lt; '#2017_start_date#'
    AND pavRemovedAlloc16.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc16.deleted=true
    AND pavRemovedAlloc16.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc17 on pavRemovedAlloc17.id = pavRemovedAlloc.id
    AND pavRemovedAlloc17.updated_on &gt;= '#2017_start_date#' AND pavRemovedAlloc17.updated_on &lt; '#2018_start_date#'
    AND pavRemovedAlloc17.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc17.deleted=true
    AND pavRemovedAlloc17.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc18 on pavRemovedAlloc18.id = pavRemovedAlloc.id
    AND pavRemovedAlloc18.updated_on &gt;= '#2018_start_date#' AND pavRemovedAlloc18.updated_on &lt; '#2019_start_date#'
    AND pavRemovedAlloc18.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc18.deleted=true
    AND pavRemovedAlloc18.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc19 on pavRemovedAlloc19.id = pavRemovedAlloc.id
    AND pavRemovedAlloc19.updated_on &gt;= '#2019_start_date#' AND pavRemovedAlloc19.updated_on &lt; '#2020_start_date#'
    AND pavRemovedAlloc19.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc19.deleted=true
    AND pavRemovedAlloc19.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc20 on pavRemovedAlloc20.id = pavRemovedAlloc.id
    AND pavRemovedAlloc20.updated_on &gt;= '#2020_start_date#' AND pavRemovedAlloc20.updated_on &lt; '#2021_start_date#'
    AND pavRemovedAlloc20.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc20.deleted=true
    AND pavRemovedAlloc20.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc21 on pavRemovedAlloc21.id = pavRemovedAlloc.id
    AND pavRemovedAlloc21.updated_on &gt;= '#2021_start_date#' AND pavRemovedAlloc21.updated_on &lt; '#2022_start_date#'
    AND pavRemovedAlloc21.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc21.deleted=true
    AND pavRemovedAlloc21.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  LEFT JOIN person_attribute_values pavRemovedAlloc22 on pavRemovedAlloc22.id = pavRemovedAlloc.id
    AND pavRemovedAlloc22.updated_on &gt;= '#2022_start_date#' AND pavRemovedAlloc22.updated_on &lt; '#2023_start_date#'
    AND pavRemovedAlloc22.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc22.deleted=true
    AND pavRemovedAlloc22.id in (select id from person_attribute_values where person_id=p.id AND person_attribute_id=#user_square_attr_id# AND deleted=true order by updated_on desc limit 1)

  JOIN locations square on (
    square.id = pavRemovedAlloc15.int_value OR
    square.id = pavRemovedAlloc16.int_value OR
    square.id = pavRemovedAlloc17.int_value OR
    square.id = pavRemovedAlloc18.int_value OR
    square.id = pavRemovedAlloc19.int_value OR
    square.id = pavRemovedAlloc20.int_value OR
    square.id = pavRemovedAlloc21.int_value OR
    square.id = pavRemovedAlloc22.int_value)
  AND square.location_type_id=#core_square_type_id# AND square.deleted=false
  -- Only interested in people who actually made some recordings (i.e. used the scheme_)
  LEFT JOIN users_websites accesscheck on accesscheck.website_id=#current_website_id# AND
    accesscheck.user_id=#auth_user_id# AND accesscheck.site_role_id&lt;3
  where 
    --If a user is deallocated, then check they haven't been re-allocated, if they have been re-allocated then they don't count as having left.
    p.id NOT in
      (select pavAlloc.person_id
         from person_attribute_values pavAlloc
          where pavAlloc.int_value=square.id AND pavAlloc.person_attribute_id=#user_square_attr_id# AND pavAlloc.deleted=false)
    AND (#created_data_only#=0 OR (#created_data_only#=1 AND EXISTS
    (SELECT s.id
     FROM samples s
     JOIN locations plot on plot.parent_id=square.id AND plot.deleted=false
     WHERE s.location_id=plot.id AND s.deleted=false AND s.training = false)))
  </query>
  <order_bys>
    <order_by>p.surname, p.first_name asc</order_by>
  </order_bys>
  <params>
    <param name='core_square_type_id' display='Core Square Type Id' description='' datatype='integer'/>
    <param name='user_square_attr_id' display='Id of the person attribute that holds user squares' description='' datatype='integer'/>
    <param name="ignore_square_dates_before" display="Ignore Square Dates Before" description="Ignore any squares created before this date.
        Useful if old squares are left on the system but are not currently active." datatype="date" emptyvalue="" default="">
      <where>square.created_on &gt;= CAST(COALESCE('#ignore_square_dates_before#','1500-01-01') as date)</where>
    </param>
    <param name="2015_start_date" description="Start date of the 2015 season." datatype="date"/>
    <param name="2016_start_date" description="Start date of the 2016 season." datatype="date"/>
    <param name="2017_start_date" description="Start date of the 2017 season." datatype="date"/>
    <param name="2018_start_date" description="Start date of the 2018 season." datatype="date"/>
    <param name="2019_start_date" description="Start date of the 2019 season." datatype="date"/>
    <param name="2020_start_date" description="Start date of the 2020 season." datatype="date"/>
    <param name="2021_start_date" description="Start date of the 2021 season." datatype="date"/>
    <param name="2022_start_date" description="Start date of the 2022 season." datatype="date"/>
    <param name="2023_start_date" description="Start date of the 2023 season." datatype="date"/>
    <param name="created_data_only" display="Only include squares that have had data (samples) created for them" datatype="checkbox"/>
    <param name='min_time_between_alloc_and_dealloc' description='Minimum time (in days) between when the 
    square was allocated and deallocated, this allows squares which were allocated and deallocated immeditaely
    (e.g. due to a mistake) to be ignored.' datatype='integer'/>  
    <param name="auth_user_id" datatype="integer" default="-1" />
    <param name="current_website_id" 
        description="Website ID, needed for access check. 
        Needed because this report is also checking data for users who are not currently a member of the current website." 
        datatype="integer" />
  </params>
  <columns>
    <column name='id' display='Person ID' sql='p.id' datatype='integer' visible="false" in_count='true'/> 
    <column name='surname' display='Surname' sql='p.surname' datatype='text'/>     
    <column name='first_name' display='First name' sql='p.first_name' datatype='text'/>  
    <column name='email_address' display='Email' sql='CASE WHEN accesscheck.id IS NULL THEN NULL ELSE p.email_address END' datatype='text'/> 
    <column name='date_left' display='Date left' sql="
    to_char(
      cast (
        case 
          WHEN pavRemovedAlloc15.id IS NOT NULL THEN pavRemovedAlloc15.updated_on
          WHEN pavRemovedAlloc16.id IS NOT NULL THEN pavRemovedAlloc16.updated_on
          WHEN pavRemovedAlloc17.id IS NOT NULL THEN pavRemovedAlloc17.updated_on
          WHEN pavRemovedAlloc18.id IS NOT NULL THEN pavRemovedAlloc18.updated_on
          WHEN pavRemovedAlloc19.id IS NOT NULL THEN pavRemovedAlloc19.updated_on
          WHEN pavRemovedAlloc20.id IS NOT NULL THEN pavRemovedAlloc20.updated_on
          WHEN pavRemovedAlloc21.id IS NOT NULL THEN pavRemovedAlloc21.updated_on
          WHEN pavRemovedAlloc22.id IS NOT NULL THEN pavRemovedAlloc22.updated_on
          ELSE NULL
        END
    as date)
    , 'DD/MM/YYYY')
    " datatype='date'/>     
    <column name='year_left' display='Year left' sql="
    case 
      WHEN pavRemovedAlloc15.id IS NOT NULL THEN 2015
      WHEN pavRemovedAlloc16.id IS NOT NULL THEN 2016
      WHEN pavRemovedAlloc17.id IS NOT NULL THEN 2017
      WHEN pavRemovedAlloc18.id IS NOT NULL THEN 2018
      WHEN pavRemovedAlloc19.id IS NOT NULL THEN 2019
      WHEN pavRemovedAlloc20.id IS NOT NULL THEN 2020
      WHEN pavRemovedAlloc21.id IS NOT NULL THEN 2021
      WHEN pavRemovedAlloc22.id IS NOT NULL THEN 2022
      ELSE NULL
    END
    " datatype='integer'/>        
  </columns>
</report>