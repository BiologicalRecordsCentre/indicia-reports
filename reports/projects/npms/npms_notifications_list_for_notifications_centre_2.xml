<report
    title="NPMS Notifications list for notifications centre"
    description="A list of notifications for use with the notifications centre extension. 
Note this version also has a website filter to only link to notifications directly related to NPMS occurrences.
Note also that the date limiter is hard-coded as 2015, this is because the notification_centre extension would
of had to have been changed to feed this param through, and it wasn't worth it as this is NPMS specific anyway.
Version 2 of this report includes some new changes that were introduced to notificiations_list_for_notifications_centre.">
  <query website_filter_field="o.website_id">
  SELECT #columns#
    FROM notifications n
      JOIN cache_occurrences_functional o ON o.id=n.linked_id
      LEFT JOIN occurrence_comments oc on oc.id=(regexp_match(n.source_detail, 'oc_id:(\d+)'))[1]::int
      #joins#
    WHERE n.acknowledged=false
      and n.user_id=#user_id#  
      and (o.training=#training# or o.id is null)
      and n.source_type&lt;&gt;'T' -- skip trigger notifications which don't display correctly in the grid
      AND n.triggered_on::TIMESTAMP WITHOUT TIME ZONE &gt;= CAST('2015-01-01' as date)
      AND #website_filter#
    #order_by#
  </query>  
  <order_bys>
    <order_by>n.id desc</order_by>
  </order_bys>
  <params>
    <param name="user_id" display="User ID" description="Warehouse user ID" datatype="text" />
    <!-- parameter for grid drop-down filter -->
    <param name="source_filter" display="Show notifications for" datatype='lookup'
           lookup_values='all:Anything,queries:Record queries,verifications:Records accepted,rejections:Records not-accepted,rejections_queries:Rejections and queries,record_comments:Record comments'>
      <wheres>
        <where value="all" operator="equal">n.source_type != '' AND n.source_type != 'A' AND n.source_type != 'GU'</where>
        <where value="queries" operator="equal">oc.query=true</where>
        <where value="verifications" operator="equal">n.source_type='V' AND oc.record_status='V'</where>
        <where value="rejections" operator="equal">n.source_type='V' AND oc.record_status='R'</where>
        <where value="rejections_queries" operator="equal">(n.source_type='V' AND oc.record_status='R') or oc.query=true</where>
        <where value="record_comments" operator="equal">n.source_type='C'</where>
      </wheres>
    </param>
    <!-- parameter for user configurable source types on edit tab. -->
    <param name="source_types" display="Source Types" 
        description="Comma separated list of source types with each item single quoted, or blank to allow all." datatype="text[]" default=''>
      <wheres>
        <where>n.source_type in (#source_types#)</where>
      </wheres>
    </param>
    <param name="system_name" display="System Name" description="Name to display instead of admin for system generated notifications" datatype="text" />
    <param name="default_edit_page_path" display="Default edit page path" description="The default page that the notification edit link goes to if the input_form is blank and the user has rights to perform the edit" datatype="text"/>
    <param name="view_record_page_path" display="View record page path" description="The default page that the notification view link goes to if the user has rights to view the record" datatype="text"/>
    <param name="website_id" display="Website Id for the occurrence record." datatype="integer"/>
  </params>
  <columns>
    <column name="notification_id" visible="false" sql="n.id" />
    <column name="source" display='Source' visible="false" datatype="text" sql="n.source" />
    <column name="source_type" display='Source type' visible="false" datatype="text" sql="n.source_type" />
    <column name="data" display="Message" datatype="text" sql="replace(replace(n.data, '\n', '&lt;br/&gt;'), '&quot;username&quot;:&quot;admin&quot;', '&quot;username&quot;:&quot;#system_name#&quot;')" />
    <column name="occurrence_id" display="Record ID" datatype="integer" sql="o.id" visible="false"/>
    <column name="sample_id" display="Sample ID" visible="false" datatype="integer" sql="o.sample_id" />
    <column name="linked_id" display="Linked ID" datatype="integer" sql="n.linked_id" visible="false"/>
    <column name="acknowledged" display="Acknowledged" datatype="boolean" sql="n.acknowledged" visible="false" />
    <column name="user_id" display="User ID" visible="false" datatype="integer" sql="n.user_id" />
    <column name="triggered_on" display="Notification date" datatype="date" sql="n.triggered_on" visible="false" />    
    <column name="triggered_date" display="Notification date" datatype="date" sql="to_char(n.triggered_on, 'DD/MM/YYYY')" orderby="triggered_on" />
    <column name="editing_form" visible="false" sql="case when o.input_form is null AND o.website_id=#website_id# AND o.created_by_id=#user_id# then'#default_edit_page_path#'else o.input_form end" />
    <column name="viewing_form" visible="false" sql="case when o.website_id=#website_id# then '#view_record_page_path#' else null end" />
    <column name="editable_flag" visible="false" sql="case when o.website_id=#website_id# AND o.created_by_id=#user_id# AND ('#default_edit_page_path#' &lt;&gt; 'null' OR o.input_form IS NOT null) then true else false end" />
    <column name="viewable_flag" visible="false" sql="case when o.website_id=#website_id# AND '#view_record_page_path#' &lt;&gt; 'null' then true else false end" />
    <column name="reply_flag" visible="false" sql="case when o.website_id=#website_id# then true else false end" />
    <column name="manage_members_flag" visible="false" sql="case when n.source_type='GU' then true else false end" />
  </columns>
</report>