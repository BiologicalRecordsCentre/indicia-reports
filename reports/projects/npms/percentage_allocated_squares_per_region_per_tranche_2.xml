<report
    title="Percentage allocated squares per region per tranche"
    description="List of regions/tranches where the percentage of allocated squares is shown. Regions are typically calculated from the first two digits
from the square British grid reference. However some regions are combined from multiple areas, for insteance HPTU is a combination of HP, HT and HU.
The same applies for 3 digit regions, NAB is a combination of NA and NB.
IoM And CI are the exceptions to this rule, these are Isle of Man/Channel Islands where we calculate if a square intersects by a geometry intersect rather than looking at the spatial reference digits.
Note the single digit regions are based on the Irish grid reference system."
>
  <query website_filter_field="lw.website_id">
  SELECT #columns#  
  FROM locations sq
  LEFT JOIN locations_websites lw on lw.location_id=sq.id AND lw.deleted=false
  LEFT JOIN location_attribute_values lavTra on lavTra.location_id=sq.id AND lavTra.location_attribute_id=#tranche_attr_id# AND lavTra.deleted=false
  LEFT JOIN person_attribute_values pav on pav.int_value=sq.id AND pav.person_attribute_id=#user_square_attr_id# AND pav.deleted=false
  WHERE (sq.location_type_id=#core_square_type_id#)
  #filters#
  AND sq.deleted=false
  AND #website_filter#
  </query>
  <order_bys>
    <order_by>region asc</order_by>
  </order_bys>
  <params>
    <param name='core_square_type_id' display='Core Square Type Id' description='' datatype='integer'/>
    <param name='tranche_attr_id' display='Id the location tranche attribute' description='Id the location tranche attribute' datatype='integer'/>
    <param name='region' display='Region' description='Region the square is in' datatype='lookup'
        lookup_values='C:C,CI:CI,D:D,GH:GH,HPTU:HPTU,HY:HY,IoM:IoM,J:J,NAB:NAB,NC:NC,ND:ND,NF:NF,NG:NG,NH:NH,NJK:NJK,NLM:NLM,NN:NN,NO:NO,NR:NR,NS:NS,NT:NT,NU:NU,NWX:NWX,NY:NY,NZ:NZ,SD:SD,SE:SE,SH:SH,SJ:SJ,SK:SK,SMNR:SMNR,SO:SO,SP:SP,SS:SS,ST:ST,SU:SU,SVW:SVW,SX:SX,SY:SY,SZ:SZ,TA:TA,TF:TF,TG:TG,TL:TL,TM:TM,TQV:TQV,TR:TR'>
        <where>
        (('#region#'='IoM' AND
          st_intersects(sq.centroid_geom, 
                  '010300002031BF0D0001000000090000004A5D74DAED381DC12DA6636A74A95B412E9B10C9EC631DC195FE949F9D9C5B4100CE07039BD41CC14A986924AC905B410E7CB12871F01EC1A2A73778B45F5B41B8576A20DC9620C17DF92EF9505D5B412A1ACE31DD6B20C12038785D477A5B41C61FA02AAAEB1EC10413C999F2AA5B410A2ACBD0D0501DC1166A4D5924AC5B414A5D74DAED381DC12DA6636A74A95B41'))
        OR  
        ('#region#'='CI' AND
          st_intersects(sq.centroid_geom, 
                  '010300002031BF0D00010000000700000012301D5FDC6E11C1AB7095A1D84B5841FEF11CD1FF5410C19DFEA233C546584135B1860C42B10AC1F50D7187CD155841C89C04E25B1A0BC12661157E610558411A891235EC3E0FC1BAF4AF4EE3035841CD25F2B8B50913C169D48DC92338584112301D5FDC6E11C1AB7095A1D84B5841'))
        OR  
        ('#region#' = 'GH' AND
          (regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'G' OR regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'H'))
        OR
        ('#region#'!='IoM' AND char_length('#region#') = 3 AND
          (substring('#region#', 1, 1) || substring('#region#', 2, 1) = regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') OR  substring('#region#', 1, 1) || substring('#region#', 3, 1) = regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','')))
        OR   
        (char_length('#region#') = 4 AND
          (substring('#region#', 1, 1) || substring('#region#', 2, 1) = regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') OR  substring('#region#', 1, 1) || substring('#region#', 3, 1) = regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') OR  substring('#region#', 1, 1) || substring('#region#', 4, 1) = regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','')))
        OR 
        ('#region#' != 'GH' AND '#region#' != 'CI' AND ('"' || regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') || '"'='"#region#"')))
        </where>
    </param>
    <param name='tranche' display='Tranche number' description='Number of the tranche you wish to return data for, enter nothing for all tranches.' datatype='integer' emptyvalue=''> 
      <where>lavTra.int_value='#tranche#'</where>
    </param>
    <param name='user_square_attr_id' display='Id of the person attribute that holds user squares' description='' datatype='integer' emptyvalue=''/>
    <param name="ignore_square_dates_before" display="Ignore Square Dates Before" description="Ignore any squares created before this date.
        Useful if old squares are left on the system but are not currently active." datatype="date" emptyvalue="" default="">
      <where>(sq.created_on &gt;= CAST(COALESCE('#ignore_square_dates_before#','1500-01-01') as date))</where>
    </param>
  </params>
  <columns> 
    <column name='region' display='Region' 
    sql="    
    case 
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'G'
      then
        'GH'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'H'
      then
        'GH'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'HP' 
      then
        'HPTU'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'HT' 
      then
        'HPTU'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'HU'
      then
        'HPTU'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NA'
      then 
        'NAB'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NB'
      then 
        'NAB'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NJ'
      then 
        'NJK'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NK'
      then
        'NJK'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NL'
      then
        'NLM'
      when
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NM'
      then
        'NLM'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NW'
      then 
        'NWX'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'NX'
      then 
        'NWX'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'SM'
      then 
        'SMNR'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'SN'
      then 
        'SMNR'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'SR'
      then 
        'SMNR'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'SV'
      then 
        'SVW'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'SW'
      then 
        'SVW'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'TQ'
      then 
        'TQV'
      when 
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','') = 'TV'
      then 
        'TQV'
      when 
        (st_intersects(sq.centroid_geom, 
            '010300002031BF0D0001000000090000004A5D74DAED381DC12DA6636A74A95B412E9B10C9EC631DC195FE949F9D9C5B4100CE07039BD41CC14A986924AC905B410E7CB12871F01EC1A2A73778B45F5B41B8576A20DC9620C17DF92EF9505D5B412A1ACE31DD6B20C12038785D477A5B41C61FA02AAAEB1EC10413C999F2AA5B410A2ACBD0D0501DC1166A4D5924AC5B414A5D74DAED381DC12DA6636A74A95B41'))
      then
        'IoM'
      when 
        (st_intersects(sq.centroid_geom, 
            '010300002031BF0D00010000000700000012301D5FDC6E11C1AB7095A1D84B5841FEF11CD1FF5410C19DFEA233C546584135B1860C42B10AC1F50D7187CD155841C89C04E25B1A0BC12661157E610558411A891235EC3E0FC1BAF4AF4EE3035841CD25F2B8B50913C169D48DC92338584112301D5FDC6E11C1AB7095A1D84B5841'))
      then
        'CI'
      else
        regexp_replace(regexp_replace(sq.centroid_sref, ',[^ ]', ', ', 'g'),'\d+$','')
    END
" datatype='text' in_count='true'/>
    <column name='percent_allocated' display='Allocation %' sql="round(case when cast(count(distinct(sq.id)) as float)=0 then 0 else count(distinct(case when pav.id IS NOT null then sq.id end))/cast(count(distinct(sq.id)) as numeric)*100 end,2)" aggregate="true"/>
    <column name='number_of_squares' display='Number of squares' sql="cast(count(distinct(sq.id)) as float)" aggregate="true"/>
    <column name='number_of_allocated_squares' display='Number of allocated squares' sql="count(distinct(case when pav.id IS NOT null then sq.id end))" aggregate="true"/>
  </columns>
</report>