<report
    title="Mean cover value per species per habitat 2"
    description="Return the average value of species cover by species and/or fine habitat. This is complicated by some surveys
using a basic integer for the cover, whilst on others this number is represented on a termlist."
>
  <query website_filter_field="co.website_id">
    SELECT #columns#
    FROM cache_occurrences_functional co
      JOIN cache_samples_functional samp on samp.id=co.sample_id AND samp.survey_id in (#limit_survey_ids#) AND samp.training = false
      JOIN sample_attribute_values savHab on savHab.sample_id=samp.id AND savHab.sample_attribute_id=#habitat_attr_id# AND savHab.deleted=false
      JOIN cache_termlists_terms tthab ON tthab.id = savHab.int_value AND tthab.parent_id IS NOT NULL
      LEFT JOIN occurrence_attribute_values oavInt on oavInt.occurrence_id=co.id AND oavInt.occurrence_attribute_id=#cover_int_occ_attr_id# AND oavInt.deleted=false
      LEFT JOIN occurrence_attribute_values oavCov on oavCov.occurrence_id=co.id AND oavCov.occurrence_attribute_id=#cover_tt_occ_attr_id# AND oavCov.deleted=false
      LEFT JOIN cache_termlists_terms ttCov ON ttCov.id = oavCov.int_value
      #joins#
    WHERE
      #website_filter#
      #filters#
      AND co.survey_id in (#limit_survey_ids#)
      AND co.training = false
    GROUP BY tthab.term
  </query>
  <order_bys>
    <order_by>tthab.term ASC</order_by>
  </order_bys>
  <params>
    <param name='habitat_attr_id' display='Habitat Sample Attribute Id' description='Id of the sample attribute that holds the habitat.' datatype='integer'/>
    <param name='cover_int_occ_attr_id' display='Species cover value integer attribute id' description='Id of the occurrence attribute that holds the cover integer value' datatype='integer'/>
    <param name='cover_tt_occ_attr_id' display='Species cover value termlist attribute id' description='Id of the occurrence attribute that holds the cover termlist value' datatype='lookup'/>
    <param name="survey_id" display="Surveys" datatype="lookup" population_call='report:projects/npms/get_surveys_for_population_call:id:title' emptyvalue=''>
      <where>co.survey_id=#survey_id#</where>
    </param>
    <param name="taxa_taxon_list_id" display="Species" datatype="lookup" population_call='autocomplete:species' emptyvalue=''>
      <join>JOIN taxa_taxon_lists ttl on ttl.taxon_meaning_id=co.taxon_meaning_id AND ttl.deleted=false</join>
      <where>ttl.id = #taxa_taxon_list_id#</where>
    </param>  
    <param name='habitat' display='Fine Habitat' description='Habitat to report on.' datatype='lookup' emptyvalue=''
        population_call='report:projects/npms/fine_habitats_for_population_call:id:term'>
      <where>savHab.int_value=#habitat#</where>
    </param>
    <param name="ignore_dates_before" display="Ignore samples whose date is before this date (we can ignore previous years data)" description="Ignore data created before this date." datatype="date" emptyvalue="" default="">
      <where>samp.date_start &gt;= CAST(COALESCE('#ignore_dates_before#','1500-01-01') as date)</where>
    </param>
    <param name="limit_survey_ids" display="Limit Survey IDs" description="Survey IDs to limit results to when all surveys are being returned by the user." datatype="text"/>
  </params>
  <columns>
    <column name='habitat' display='Habitat' sql='tthab.term' datatype='text' in_count="true"/>
    <column name='habitat_abbr' display='Abbreviation' sql="
    CASE
      WHEN tthab.term='Acid fens, mires and springs' then 'AFF'
      WHEN tthab.term='Arable field margins' then 'AFM'
      WHEN tthab.term='Base-rich fens, mires and springs' then 'BFF'
      WHEN tthab.term='Blanket bog' then 'BB'
      WHEN tthab.term='Coastal saltmarsh' then 'CS'
      WHEN tthab.term='Coastal sand dunes' then 'CSD'
      WHEN tthab.term='Coastal vegetated shingle' then 'CVS'
      WHEN tthab.term='Dry acid grassland' then 'DAG'
      WHEN tthab.term='Dry calcareous grassland' then 'DCG'
      WHEN tthab.term='Dry deciduous woodland' then 'DDW'
      WHEN tthab.term='Dry heathland' then 'DH'
      WHEN tthab.term='Montane dry heathland' then 'DMH'
      WHEN tthab.term='Hedgerows of native species' then 'HNS'
      WHEN tthab.term='Inland rocks and scree' then 'IRS'
      WHEN tthab.term='Machair' then 'M'
      WHEN tthab.term='Maritime cliffs and slopes' then 'MCT'
      WHEN tthab.term='Montane acid grassland' then 'MAG'
      WHEN tthab.term='Montane calcareous grassland' then 'MCG'
      WHEN tthab.term='Montane rocks and scree' then 'MRS'
      WHEN tthab.term='Native conifer woods and juniper scrub' then 'NPW'
      WHEN tthab.term='Neutral damp grassland' then 'NDG'
      WHEN tthab.term='Neutral pastures and meadows' then 'NPM'
      WHEN tthab.term='Nutrient-poor lakes and ponds' then 'NPL'
      WHEN tthab.term='Nutrient-rich lakes and ponds' then 'NRL'
      WHEN tthab.term='Raised bog' then 'RB'
      WHEN tthab.term='Rivers and streams' then 'RS'
      WHEN tthab.term='Wet heath' then 'WH'
      WHEN tthab.term='Wet woodland' then 'WW'
      ELSE tthab.term
    END" datatype='text'/>
    <!-- A few things to note here, firstly, the all the coalesces makes sure we return at least a 0 when doing an addition, as null addition doesn't work. Then NULLIF statement make sures if we detect 0 as a species cover, it does not count towards the mean calculation at all, this behaviour is on request of client and
    makes sense in the context of this report. Also note that the cover values get translated into percentages before being used in the calculations-->
    <column name='mean_species_cover' display='Mean Cover' sql="
    round(
      cast(
      avg(NULLIF(coalesce(
        case oavInt.int_value
          when 1 then 0.3
          when 2 then 1.5
          when 3 then 4.3
          when 4 then 9.2
          when 5 then 16.4
          when 6 then 26.4
          when 7 then 39.4
          when 8 then 55.7
          when 9 then 75.7
          when 10 then 99.5
          END
      ,0)
      +
      coalesce((cast(ttCov.sort_order as float)/10),0),0))
      as numeric)
    ,2)
    "/>
    <column name='standard_deviation' display='Standard Deviation' sql="
    round(
    cast(
    stddev(NULLIF(coalesce(
      case oavInt.int_value
        when 1 then 0.3
        when 2 then 1.5
        when 3 then 4.3
        when 4 then 9.2
        when 5 then 16.4
        when 6 then 26.4
        when 7 then 39.4
        when 8 then 55.7
        when 9 then 75.7
        when 10 then 99.5
      END
    ,0)
    +
    coalesce((cast(ttCov.sort_order as float)/10),0),0))
    as numeric)
    ,2)"/>
  </columns>
</report> 