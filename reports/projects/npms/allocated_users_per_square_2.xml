<report
    title="Allocated users per square 2"
    description="Displays a list of squares and a list of allocated users and dates (unapproved allocations in red)."
>
  <query website_filter_field="lw.website_id">
  SELECT #columns#
  FROM locations l
    LEFT JOIN locations_websites lw on lw.location_id=l.id AND lw.deleted=false

    LEFT JOIN location_attribute_values lavEx on lavEx.location_id=l.id AND lavEx.location_attribute_id=#excluded_square_attr_id# AND lavEx.deleted=false

    LEFT JOIN person_attribute_values pav on pav.int_value=l.id AND pav.person_attribute_id=#user_square_attr_id# AND pav.deleted=false
    LEFT JOIN people p on p.id=pav.person_id AND p.deleted=false
    LEFT JOIN users u on u.person_id=pav.person_id AND u.deleted=false
    LEFT JOIN users_websites uw on u.id=uw.user_id AND uw.website_id = lw.website_id AND uw.created_on &gt;= CAST(COALESCE('#ignore_registration_dates_before#','1500-01-01') as date)
    LEFT JOIN users_websites uwac on u.id=uwac.user_id AND uw.website_id=uwac.website_id AND uwac.site_role_id IS NOT NULL
    LEFT JOIN users_websites accesscheck on accesscheck.website_id=uwac.website_id AND accesscheck.user_id=#auth_user_id# AND accesscheck.site_role_id&lt;3
  WHERE (l.location_type_id=#core_square_type_id#)  
    AND #website_filter# AND l.deleted=false
  </query>
  <order_bys>
    <order_by>l.name ASC</order_by>
  </order_bys>
  <params>
    <param name="ignore_registration_dates_before" display="Ignore Registration Dates Before" description="Ignore anyone who registered earlier than this date.
        Useful if old users are left on the system but are not currently active." datatype="date" emptyvalue="" default=""/>
    <param name="ignore_square_dates_before" display="Ignore Square Dates Before" description="Ignore any squares created before this date.
        Useful if old squares are left on the system but are not currently active." datatype="date" emptyvalue="" default="">
      <where>l.created_on &gt;= CAST(COALESCE('#ignore_square_dates_before#','1500-01-01') as date)</where>
    </param>
    <param name='core_square_type_id' display='Core Square Type Id' description='' datatype='integer'/>
    <param name='user_square_attr_id' display='Id of the person attribute that holds user squares' description='' datatype='integer'/>
    <param name="excluded_square_attr_id" display="Excluded squares attribute id" description="Id of attribute that holds whether a square is excluded or not. If it is excluded then don't display on the map." datatype="integer"/>
    <param name="auth_user_id" datatype="integer" default="-1" />
  </params>
  <columns> 
    <column name='id' sql='l.id' datatype='integer' visible='false' in_count='true'/>  
    <column name='name' display='Square Name' sql='l.name' datatype='text' /> 
    <column name='excluded_square' display="Excluded?" sql="case when lavEx.id IS NOT NULL AND lavEX.int_value = 1 then 'Excluded' end" datatype='text' />   
    <column name='allocated_count' display='No of allocated users (approved)' sql='count(case when pav.updated_by_id!=u.id AND uw.id IS NOT NULL then 1 end)' datatype='integer' aggregate='true'/>   
    --Show unapproved square allocations in red
    <column name='allocated_users' display='Allocated users' 
      sql="array_to_string(array_agg(
        case 
          when pav.updated_by_id!=u.id AND uw.id IS NOT NULL 
            then p.first_name || ' ' || p.surname || ' (' || CASE WHEN accesscheck.id IS NULL THEN NULL ELSE p.email_address END || ')' 
          when pav.updated_by_id=u.id AND uw.id IS NOT NULL 
            then '&lt;b style=&quot;color:red&quot;&gt;' || p.first_name || ' ' || p.surname || ' (' ||  CASE WHEN accesscheck.id IS NULL THEN NULL ELSE p.email_address END || ')' || '&lt;/b&gt;' else '' 
        end) , ', ')"    datatype='text' aggregate='true'/>  
    <column name='allocation_dates' display='Allocated dates' 
      sql="array_to_string(array_agg(
        case 
          when pav.updated_by_id!=u.id AND uw.id IS NOT NULL 
            then to_char(pav.created_on, 'DD/MM/YYYY') 
          when pav.updated_by_id=u.id AND uw.id IS NOT NULL 
            then '&lt;b style=&quot;color:red&quot;&gt;' || to_char(pav.created_on, 'DD/MM/YYYY') || '&lt;/b&gt;' else '' 
        end), ', ')"
    datatype='text' aggregate='true'/>  
  </columns>
</report>