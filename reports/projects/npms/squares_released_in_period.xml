<report
    title="Squares released in period"
    description="List of squares that have been released between two dates.
    Report is very similar to Squares Taken On In Period and Deallocated Squares 2 report."
>
  <query website_filter_field="lw.website_id">
  SELECT distinct #columns#
  FROM locations square
    LEFT JOIN locations_websites lw on lw.location_id=square.id AND lw.deleted=false
    LEFT JOIN location_attribute_values lavEx on lavEx.location_id=square.id 
      AND lavEx.location_attribute_id=#excluded_square_attr_id# AND lavEx.deleted=false
    LEFT JOIN locations plot on plot.parent_id=square.id AND plot.deleted=false
    --Are we interested in squares which are allocated and don't have data. Varies based on checkbox option provided by user.
    --If square is de-allocated it must have a deleted allocation
    JOIN person_attribute_values pavRemovedAlloc on pavRemovedAlloc.int_value=square.id AND pavRemovedAlloc.person_attribute_id=#user_square_attr_id# AND pavRemovedAlloc.deleted=true
      AND (EXTRACT(epoch from age(pavRemovedAlloc.updated_on::DATE, pavRemovedAlloc.created_on::DATE)) / 86400)::int &gt;&#61; #min_time_between_alloc_and_dealloc#
    JOIN people p on p.id=pavRemovedAlloc.person_id AND p.deleted=false
    JOIN users u on u.person_id=p.id AND u.deleted=false
    JOIN users_websites uw on u.id=uw.user_id AND uw.website_id=lw.website_id AND uw.created_on &gt;= CAST(COALESCE('#ignore_registration_dates_before#','1500-01-01') as date)
    LEFT JOIN users_websites uwac on u.id=uwac.user_id AND uwac.site_role_id IS NOT NULL
    LEFT JOIN users_websites accesscheck on accesscheck.website_id=uwac.website_id
      AND accesscheck.user_id=#auth_user_id# AND accesscheck.site_role_id&lt;3
  WHERE (square.location_type_id=#core_square_type_id#)  
    AND #website_filter# 
    AND (lavEx.int_value != 1 OR lavEx.int_value IS NULL) 
    AND square.deleted=false
    AND (trim('#date_from#')='' OR '#date_from#'='Click here' OR CAST(COALESCE(pavRemovedAlloc.updated_on,'1500-01-01') as date) &gt;= CAST(COALESCE('#date_from#','1500-01-01') as date))
    AND (trim('#date_to#')='' OR '#date_to#'='Click here' OR CAST(COALESCE(pavRemovedAlloc.updated_on,'1500-01-01') as date) &lt;= CAST(COALESCE('#date_to#','1500-01-01') as date)) 
    AND (#created_data_only#=0 OR (#created_data_only#=1 AND EXISTS
      (SELECT s.id
      FROM samples s
      WHERE s.location_id=plot.id AND s.deleted=false AND s.training = false)))
    <!-- Note for this report (as opposed to squares_taken_on_in_period), the "pavRemovedAlloc.updated_by_id != u.id" line is not included here, 
    as this is used for detection of approval squares.
    When a square is approved, the approver (updated_by_id) is not the same as the original user.
    When the square is released, it might well be that the user and updated_by_id are the same (user removes their own square)
    For that reason that "pavRemovedAlloc.updated_by_id != u.id" line is not included.-->
  </query>
  <params>
    <param name='core_square_type_id' display='Core Square Type Id' description='' datatype='integer'/>
    <param name='user_square_attr_id' display='Id of the person attribute that holds user squares' description='' datatype='integer'/>
    <param name="ignore_registration_dates_before" display="Ignore Registration Dates Before" description="Ignore anyone who registered earlier than this date
        where working out if a square has been allocated or not." datatype="date" emptyvalue="" default=""/>
    <param name="ignore_square_dates_before" display="Ignore Square Dates Before" description="Ignore any squares created before this date.
        Useful if old squares are left on the system but are not currently active." datatype="date" emptyvalue="" default="">
      <where>square.created_on &gt;= CAST(COALESCE('#ignore_square_dates_before#','1500-01-01') as date)</where>
    </param>
    <param name="excluded_square_attr_id" display="Excluded squares attribute id" description="Id of attribute that holds whether a square is excluded or not. If it is excluded then don't display on the map." datatype="integer"/>
    <param name="created_data_only" display="Only include squares that have had data (samples) created for them" datatype="checkbox"/>
    <param name='min_time_between_alloc_and_dealloc' description='Minimum time (in days) between when the 
    square was allocated and deallocated, this allows squares which were allocated and deallocated immeditaely
    (e.g. due to a mistake) to be ignored.' datatype='integer'/> 
    <param name='date_from' display='Date From' datatype='date' />
    <param name='date_to' display='Date To' datatype='date' />
    <param name="auth_user_id" datatype="integer" default="-1" />
  </params>
  <columns> 
    <column name='id' sql='square.id' datatype='integer' visible="false" in_count="true"/>  
    <column name='square' display='Square' sql="regexp_replace(square.centroid_sref, ',[^ ]', ', ', 'g')" datatype='text' aggregate="true"/>
    <column name='first_name' sql='p.first_name' display='Released by (first name)' datatype='text'/>
    <column name='surname' sql='p.surname' display='Released by (surname)' datatype='text'/>
    <column name='email' sql='CASE WHEN accesscheck.id IS NULL THEN NULL ELSE p.email_address END' display='Released by (email address)' datatype='text'/>
    <column name='release_date' sql="to_char(cast (pavRemovedAlloc.updated_on as date), 'DD/MM/YYYY')" display='Release date' datatype='date'/>
  </columns>
</report>